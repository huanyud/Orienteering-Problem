function [hasMoreBudget, sel, currentTour, currentCost] = further_exploit(node, rwd, BGT, sel, currentTour, currentCost)

unsel = setdiff(1:size(node,1), sel);

increCost = Inf * ones(1, size(unsel,1)); 
connPoints = zeros(1, length(unsel));
for ii = 1:length(unsel)
    thisNode = node(unsel(ii), :);
    thisIncreCost = Inf;
    for jj = 1:length(sel)
        idxA = currentTour(jj);
        if jj == length(sel)
            idxB = currentTour(1);
        else
            idxB = currentTour(jj+1);
        end
        tempIncreCost = get_edge_weight(thisNode, node(idxA, :)) + get_edge_weight(thisNode, node(idxB, :)) - get_edge_weight(node(idxA, :), node(idxB, :));
        if tempIncreCost < thisIncreCost
            thisIncreCost = tempIncreCost;
            connPointA = idxA;
        end
    end
    increCost(ii) = thisIncreCost;
    connPoints(ii) = connPointA;
end

% Compute Reward to Incremental-Cost Ratio (ricr)
hasMoreBudget = 1;
ricr = rwd(unsel) ./ increCost;
[~, ii] = sort(ricr, 2, 'descend');
for k = 1:length(ii)
    if (increCost(ii(k)) <= BGT - currentCost)
        maxIdx = unsel(ii(k));
        sel = [sel maxIdx];                            % Add to selected node subset
        currentCost = currentCost + increCost(ii(k));  % Update current tour cost
        pos = find(currentTour == connPoints(ii(k)));
        if pos == length(currentTour)
            currentTour = [currentTour, maxIdx];
        else
            currentTour = [currentTour(1:pos), maxIdx, currentTour(pos+1:end)];
        end
        break;     
    else if (k == length(ii))
            hasMoreBudget = 0;  % If cannot select more node with given budget,
            return;             % then return.
        end
    end
end



